<반복문> : C/C++에서와 동일함.
  for문
  중첩 for문
 while문
 do-while문
 continue문, break문

<배열> (중요★)
 배열
- 인덱스와 인덱스에 대응하는 데이터들로 이루어진 자료구조
- 같은 타입의 데이터들이 순차적으로 저장
- 인덱스로 원소 데이터 접근
- 반복문을 이용하여 처리하기에 적합
- 배열 인덱스는 0부터 시작
- 인덱스: 배열의 시작위치에서부터 데이터가 있는 상대 위치
- 배열의 마지막 인덱스는 (배열크기-1)
ex)
int A[];
int NUM=sc.nextInt();
A[]=new int [NUM];

 1차원 배열
- 배열 선언+생성
ex) int arr[] = new int[10];
↳배열타입 레퍼런스변수 배열선언 = 배열생성 타입 원소개수
- 배열 선언+초기화
ex) int arr[] = {0,1,2,3};

 length 필드 = 배열의 크기
- 2차원, 비정방형 배열에서 i.length는 행의 개수, i[n].length는 n번째 행의 열의 개수
ex) 
int arr= new int[5];
int size=arr.length; //size는 5
- 배열은 자바에서 객체로 관리

 for-each문
- 배열이나 나열의 각 원소를 순차적으로 접근하는데 유용한 for문
ex)
for(변수 : 배열레퍼런스) {
   ...반복작업문...
}
ex) 배열n에 들어있는 모든 정수를 더하는 코드
int n[]={1,2,3,4,5};
int sum=0;
for(int k : n) { //n.length번 반복함 //5번
   sum+=k;
}
System.out.println(“합은 ”+sum);
 2차원 배열, 다차원 배열
- 배열 선언+생성
ex) double arr[][] = new double[5][2];
- 배열 선언+초기화
ex) double arr[][] = {{0.01,0.02}, {0.03,0.04}};

 비정방형 배열
- 각 행의 열의 개수가 다른 배열
ex)
int arr[][]= new int [4][];
arr[0]= new int [1];
arr[1]= new int [2];
arr[2]= new int [3];
arr[3]= new int [4]; 


<예외처리> (중요★)

 예외
- 자바에서 오동작이나 결과에 악영향을 미칠 수 있는 실행 중 발생한 오류
-예외발생 경우
   - 정수를 0으로 나누는 경우
   - 배열의 크기보다 큰 인덱스로 배열의 원소를 접근하는 경우★
   - 존재하지 않는 파일을 읽으려고 하는 경우
   - 정수 입력을 기다리는 코드가 실행되고 있을 때, 사용자가 문자를 입력한 경우
 
 예외처리
- 프로그램 실행 중 예외가 발생하면 이에 대응함
- 자바에서는 예외처리를 위해 try-catch-finally문을 사용함
- 보통 try-catch 블록까지 사용함, finally블록 생략 가능함
- catch에 (예외처리코드 e)입력
ex)
try {
    예외가 발생할 가능성이 있는 실행문(try블록)
}
catch (처리할 예외 타입 선언) {
    예외처리문(catch블록)
}
finally {
    예외 발생 여부와 상관없이 무조건 실행되는 문장(finally블록)
}

- try블록에서 예외가 발생하면 응용프로그램은 남은 실행문을 실행하지 않고 바로 catch블록의 예외 처리문으로 점프하여 실행함, 물론 발생한 예외의 타입과 일치하는 catch() 블록으로 점프함

 예외클래스 (중요★)
