< 자바의 GUI(Graphical User Interface) >
• GUI 목적
-	그래픽 이용, 사용자에게 이해하기 쉬운 모양으로 정보 제공
-	사용자는 마우스나 키보드를 이용하여 쉽게 입력 
• 자바 GUI 특징 
-	강력한 GUI 컴포넌트 제공, 쉬운 GUI 프로그래밍 
• 자바의 GUI 프로그래밍 방법 
-	GUI 컴포넌트와 그래픽 이용
-	AWT 패키지와 Swing 패키지에 제공되는 메카니즘 이용
-	AWT - java.awt 패키지 
-	Swing - javax.swing 패키지

< AWT와 Swing 패키지 >
• AWT(Abstract Windowing Toolkit) 
-	자바가 처음 나왔을 때 함께 배포된 GUI 라이브러리
-	java.awt 패키지
• AWT 컴포넌트는 중량 컴포넌트(Heavy weight components)
-	AWT 컴포넌트는 native(peer) 운영체제의 GUI 컴포넌트의 도움을 받아 작동  
-	운영체제에 많은 부담. 오히려 처리 속도는 빠름 
• Swing(스윙) 
-	AWT 기술을 기반으로 순수 자바 언어로 만들어진 라이브러리 
-	모든 AWT 기능 + 추가된 풍부하고 화려한 고급 컴포넌트 
-	AWT 컴포넌트에 J자가 덧붙여진 이름의 클래스 
-	그 외 J 자로 시작하는 클래스
-	javax.swing 패키지 
-	Swing 컴포넌트는 경량 컴포넌트(Light weight components) 
-	native(peer) 운영체제에 의존하지 않음

< 컨테이너와 컴포넌트 >
• 컨테이너 (Container) 
-	다른 GUI 컴포넌트를 포함할 수 있는 컴포넌트 
-	java.awt.Container 상속 
-	다른 컨테이너에 포함될 수 있음 
• 종류들
-	 AWT 컨테이너 : Panel, Frame, Applet, Dialog, Window 
-	Swing 컨테이너 : JPanel, JFrame, JApplet, JDialog, JWindow 
• 최상위 컨테이너 (Top Level Container) 
-	다른 컨테이너에 속하지 않고 독립적으로 출력 가능한 컨테이너   
-	JFrame, JDialog, JApplet 
-	모든 컴포넌트는 컨테이너에 포함되어야 화면에 출력 가능 
• 컴포넌트 (Component): 윈도우 창을 구성하는 요소 
-	컨테이너에 포함되어야 화면에 출력될 수 있는 순수 컴포넌트 
-	모든 컴포넌트는 java.awt.Component를 상속받음 
-	모든 스윙 컴포넌트는 javax.swing.JComponent를 상속받음

< 스윙 프레임 >
• 모든 스윙 컴포넌트를 담는 최상위 GUI 컨테이너 
-	JFrame을 상속받아 구현 
-	컴포넌트가 화면에 보이려면 스윙 프레임에 부착되어야 함 
-	프레임을 닫으면 프레임 내의 모든 컴포넌트가 보이지 않게 됨 
• 스윙 프레임(JFrame) 기본 구성 
-	프레임 – 스윙 프로그램의 기본 틀 
-	메뉴바 – 메뉴들이 부착되는 공간 
-	컨텐트 팬 – GUI 컴포넌트들이 부착되는 공간 (컨테이너의 일종), JPanel
 

< 스윙 프로그램의 종료 >
• 응용프로그램 내에서 스스로 종료 
-	언제 어디서나 무조건 종료 
• 프레임 닫기(종료) 버튼(X)이 클릭되면 어떤 일이 일어나는가? 
-	프레임을 종료하여 프레임 윈도우가 닫힘 
-	프레임이 화면에서 보이지 않게 되고 응용프로그램이 사라짐 
-	프레임이 보이지 않게 되지만 응용프로그램이 종료한 것 아님 
-	키보드나 마우스 입력을 받지 못함 
-	다시 setVisible(true)를 호출하면 보이게 되고 이전 처럼 작동함 
• 프레임 종료버튼이 클릭될 때 프레임을 닫고 응용 프로그램 이 종료하도록 하는 방법 
-	그 외 JFrame.HIDE_ON_CLOSE, JFrame.DO_NOTHING_ON_CLOSE, JFrame.DISPOSE_ON_CLOSE (default) 등이 있음 
-	System.exit(0); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE

< 컨테이너와 배치 개념 >
-	컨테이너마다 하나의 배치관리자가 존재 하며, 삽입되는 모든 컴포넌트의 위치와 크기를 결정하고 적절히 배치한다. 
-	컨테이너의 크기가 변하면 내부 컴포넌트 들의 위치와 크기를 모두 재조절하고 재배 치한다
• 배치 관리자 대표 유형 4 가지
-	java.awt 패키지에 구현되어 있음
 

< 컨테이너와 배치관리자 >
• 컨테이너의 디폴트 배치관리자 
-	컨테이너는 생성시 디폴트 배치관리자 설정
 

< 배치관리자 없는 컨테이너 >
• 배치관리자가 없는 컨테이너란? 
-	응용프로그램에서 컴포넌트의 절대 크기와 절대 위치 결정 
• 용도  컴포넌트의 크기나 위치를 개발자 임의로 결정하고자 하는 경우 
-	게임 프로그램과 같이 시간이나 마우스/키보드의 입력에 따라 컴포넌트들의 위치와 크기가 수시로 변하는 경우 
-	여러 컴포넌트들이 서로 겹쳐 출력하고자 하는 경우 
• 컨테이너의 배치 관리자 제거 방법 
-	container.setLayout(null); 
• 컴포넌트의 절대 크기와 절대 위치 설정 
-	프로그램 내에서 이루어져야 함  다음 메소드 이용 
-	컴포넌트 크기 설정 : component.setSize(int width, int height); 
-	컴포넌트 위치 설정 : component.setLocation(int x, int y); 
-	컴포넌트 위치와 크기 동시 설정 : component.setBounds(int x, int y, int width, int height);
