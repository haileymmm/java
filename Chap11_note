<자바의 GUI를 구성하는 두 가지 방법>
• 컴포넌트 기반 GUI 프로그래밍
: 스윙 패키지에 주어진 GUI 컴포넌트를 이용한다.
: GUI 구성이 쉽다.
: 자바 패키지에 제공하는 GUI 컴포넌트 한계가 있다.
: 일반적인 GUI 프로그램에 적합하다.
• 그래픽 기반 GUI 프로그래밍
: 선, 원, 도형, 이미지를 직접 그려내는 그래픽 화면 구성이다.
: 개발자의 작업 부담이 높다.
: 자바 패키지에 없는 독특한 GUI 구성이 가능하다.
: 게임 등 자유로운 GUI에 적합하다.

<기초적인 스윙 컴포넌트와 상속 관계>




<스윙 컴포넌트의 공통 메소드, JComponent의 메소드>
- 컴포넌트 모양과 관련된 메소드
void setForeground(Color) 전경색 설정
void setBackground(Color) 배경색 설정
void setOpaque(boolean) 불투명성 설정
void setFont(Font) 폰트 설정
Font getFont() 폰트 리턴

- 컴포넌트 위치와 크기에 관련된 메소드
int getWidth() 폭 리턴
int getHeight() 높이 리턴
int getX() x 좌표 리턴
int getY() y 좌표 리턴
Point getLocationOnScreen() 스크린 좌표상에서의 컴포넌트 좌표
void setLocation(int, int) 위치 지정
void setSize(int, int) 크기 지정

- 컴포넌트의 상태와 관련된 메소드
void setEnabled(boolean) 컴포넌트 활성화/비활성화
void setVisible(boolean) 컴포넌트 보이기/숨기기
boolean isVisible() 컴포넌트의 보이는 상태 리턴

- 컨테이너를 위한 메소드
Component add(Component) 자식 컴포넌트 추가
void remove(Component) 자식 컴포넌트 제거
void removeALL() 모든 자식 컴포넌트 제거
Component[] getComponents() 자식 컴포넌트 배열 리턴
Container getParent() 부모 컨테이너 리턴
Container getTopLeveLAncestor() 최상위 부모 컨테이너 리턴

<JLabel, 레이블 컴포넌트>
• JLabel의 용도와 생성자
: 문자열이나 이미지를 컴포넌트화하여 출력하기 위한 목적이다.



<레이블 컴포넌트 생성 예>
• 단순 텍스트만을 가진 레이블 컴포넌트 생성
: JLabel textLabel = new JLabel(“사랑합니다”);
• 이미지를 가진 레이블 컴포넌트 생성
: 이미지 파일로부터 이미지를 읽기 위해 lmagelcon 클래스 사용
: 다룰 수 있는 이미지는 png, gif, jpg가 있다.
• 수평 정렬 값을 가진 레이블 컴포넌트 생성
: 텍스트 이미지 모두 출력하고자 하는 경우 수평 정렬 지정

<JButton, 버튼 컴포넌트>
• 버튼 컴포넌트
: 버튼 모양의 컴포넌트
: 버튼을 선택하면 Action 이벤트 발생
• 생성자


<버튼 컴포넌트 생성 예>
• “hello” 문자열을 가진 버튼 컴포넌트 생성 예
: JButton btn = new JButton(“hello”);
• 하나의 버튼에 3개의 이미지 연결
: 마우스 접근에 따라 서로 다른 3개의 이미지 출력 가능
: 사용자의 버튼 조작에 대한 시각적 효과를 극대화
• 3개의 버튼 이미지
1. 버튼의 보통 상태 때 출력되는 이미지
: 생성자에 이미지 아이콘 전달
: 이미지 설정 메소드: JButton의 setlcon(lcon image)
2. 버튼에 마우스가 올라갈 때 출력되는 이미지
: 이미지 설정 메소드: JButton.setRolloverlcon(lcon);
3. 버튼을 누르고 있는 동안 출력되는 이미지
: 이미지 설정 메소드: JButton.setPressedlcon(lcon)
• 이미지 아이콘 생성
: new lmagelcon(이미지 경로명);

<레이블과 버튼의 정렬(Alignment)>
• 수평 정렬: 컴포넌트 내에 이미지와 텍스트의 수평 위치


• 수직 정렬: 컴포넌트 내에 이미지와 텍스트의 수직 위치


<JCheckBox, 체크박스 컴포넌트>
• JCheckBox
: 선택과 비선택의 두 상태만 가지는 체크 버튼이다.
• 생성자

<체크 박스 생성>
• 문자열 체크 박스
: “사과” 텍스트를 가진 체크 박스 생성
ex) JCheckBox c = new JCheckBox(“사과”);
: 체크 박스 모양이 명료하게 출력되고 사용자는 이것을 체크
• 이미지 아이콘을 가진 체크 박스 생성 예: 체크 박스 모양이 출력이 되지 않음
: 선택 상태를 표현하는 이미지 아이콘을 따로 지정해야 함

<JCheckBox에서 Item 이벤트 처리>
• Item 이벤트
: 체크 박스나 라디오 버튼의 선택 상태가 바뀔 가능성이 발생하는 이벤트
-> 마우스나 키보드로 체크 박스의 선택 상태를 바꾸는 경우
-> 프로그램에서 선택 상태를 바꾸는 경우
• ItemListener 인터페이스 추상 메소드

• ItemEvent의 주요 메소드

• 생성자


<JRadioButton, 라디오 버튼 컴포넌트>
• JRadioButton
: 라디오 버튼이란?
-> 여러 버튼으로 그룹을 형성하고, 하나 선택되는 버튼
-> 다른 버튼이 선택되면 이전에 선택된 버튼은 자동으로 해제됨
: 체크 박스와의 차이
-> 체크 박스는 각 체크 박스마다 선택과 해제가 가능
-> 라디오 버튼은 그룹에 속한 버튼 중 하나만 선택 상태가 됨
• 이미지를 가진 라디오 버튼의 생성 및 다루기는 체크 박스와 완전히 동일

<라디오 버튼의 생성 과정>
1. 버튼 그룹 객체 생성
2. 라디오 버튼 컴포넌트 생성
3. 라디오 버튼을 버튼 그룹에 삽입
4. 라디오 버튼을 컨테이너에 삽입


<JTextField, 텍스트필드 컴포넌트>
• JTextField
: 텍스트필드란?
-> 한 줄짜리 텍스트 입력 창을 구현한 컴포넌트
-> 텍스트 입력 도중 <Enter> 키가 입력되면 Action 이벤트 발생
-> 입력 가능한 문자 개수와 입력 창의 크기는 서로 다름
• 생성자
