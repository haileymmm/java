<자바의 기본>
 main() 메소드
- 자바 프로그램은 main()에서 실행 시작함
ex) public static void main(String[] args) { ... }
   -public : 다른 클래스에서 메소드가 호출 가능함
   -static : 객체 생성 전부터 호출 가능
   -void : 아무값도 리턴안함, main()메소드의 리턴타입
   -String[] args로 실행 인자를 전달받음, 문자열배열+매개변수
- main() 메소드는 public 속성임 (다른 클래스에서 메소드가 호출 가능함)
- 메소드 : C/C++에서의 ‘멤버함수’를 ‘메소드’로 지칭함, 클래스 밖에 작성할 수 없음,
메소드 내 선언된 변수는 지역변수(메소드 실행이 끝나면 자동 소멸)
- 필드 : 멤버변수 

 화면 출력
- 표준출력스트림 System.out의 메소드 호출
ex) System.out.println(“Hello”);
- println()은 출력후 줄바꿈, 여러타입의 데이터 출력 가능
- print()는 연속해서 출력

 식별자
- 클래스, 변수, 상수, 메소드 등에 붙이는 이름
- 식별자 규칙
　　- 특수문자 %， *, &, @, ^ )， 백( 랩， space 은 식별자로 사용할 수 없으나，‘-’, ‘$’는 예외로 사용할 수 있다. 
    - 한글도 식별자로 사용 가능하다. 
    - if, while, class 등 자바 언어의 키워드는 식별자로 사용할 수 없다. 
    - 식별자의 첫번째 문자로 숫자는 사용할 수 없다. 
    - true, false , null은 자바의 키워드이므로 식별자로 사용할 수 없다.
    - ‘_’와‘$’는 식별자의 첫 번째 문자로 사용할 수 있으나, 일반적으로 잘 사용하지 않는다. 
    - 대소문자 구별한다. (ex) Test와 test는 별개의 식별자
    - 길이 제한이 없다. 

 가독성 높은 이름 붙이기
1) 클래스 이름
- 첫 번째 문자는 대문자로 시작
- 각 단어의 첫 번째 문자만 대문자
ex) public class HelloWorld { } , class AutoVendingMachine { }

2) 변수, 메소드 이름
- 첫 단어 이후 각 단어의 첫 번째 문자는 대문자로 시작
ex) int myAge; , public int getAge() {}

3) 상수 이름
- 모든 문자를 대문자로 표시
ex) final static double PI = 3.141592;

 자바 데이터 타입 (9가지)

- 기본 타입 8개
    - boolean
    - char
    - byte
    - short
    - int
    - long
    - float
    - double
-레퍼런스 타입 1개 (용도는 3가지)
    - 배열에 대한 레퍼런스
    - 클래스에 대한 레퍼런스
    - 인터페이스에 대한 레퍼런스
↳레퍼런스는 포인터개념, but 실제주소값을 갖지 않음

 문자열
- 문자열은 기본타입이 아님, String클래스(추후 6장에서 자세히 설명)로 문자열 표현
- 자바에서는 다음과 이 문자열과 기본 타입의 + 연산이 실행되면， 기본 타입의 값이 문자열로 바뀌고 두 문자열이 연결된 새로운 문자열이 생성됨

-char 잘 안 씀, String으로 씀 
 
 리터럴(literal)
- 프로그램에 직접 표현한 값
- 정수, 실수, 문자, 논리, 문자열 타입의 리터럴이 있음
1) 정수 리터럴 (4가지)


2) 실수 리터럴
- 소수점 형태나 지수 형태
- double형 타입으로 자동 처리됨
- 숫자뒤 f/F를 붙이면 float, d/D를 붙이면 double 타입으로 강제변환 가능함

3) 문자 리터럴
- 단일 인용부호(‘’)로 문자 표현, \u다음에 문자의 유니코드값 사용하여 표현

4) 논리 리터럴, boolean타입
- true, false
- boolean타입의 변수에 직접 치환하거나 조건문에 사용함

5) 문자열 리터럴
-이중 인용부호(“”)로 문자열 표현, 자바에서 모든 문자열은 String클래스의 객체이므로, 문자열 리터럴은 String객체에 저장함
ex) String str=“Hello”;

 상수
- final 키워드 사용 (C에서 define처럼)
ex) final double PI = 3.14;

 키 입력
- 표준입력스트림 객체 System.in
- Scanner클래스 사용
↳ Scanner scanner = new Scanner(System.in);
↳(타입,첫문자 대문자 필수) 변수이름 = new ((타입,첫문자 대문자 필수)System.in객체);
↳클래스마다 생성해야 함
-Scanner클래스는 사용자가 입력하는 키 값을 공백 문자( ‘ ’,‘\t’,‘\n’)를 기준으로 분리하여 토큰 단위로 읽음. 예를 들어 사용자가 "Kim Seoul 20 65.1 true”를 입력하면 scanner객체는 빈칸으로 끊어 "Kim" , "Seoul" , "20" , "65.1" , "true"의 토큰 단위로 읽음.
- import java.util.Scanner;
↳Scanner를 사용하기 위해서 프로그램 맨 앞줄에 import문이 필요함
↳import java.util.*;

 Scanner클래스의 메소드 (중요★)

-nextLine()(토큰들 입력가능) vs. next()(한 토큰만 입력가능)
-scanner객체 닫기
ex)scanner.close();
↳scanner객체가 닫히면, System.in도 함께 닫히므로, 더 이상 System.in을 사용하여 키 입력을 받을 수 없음.

<조건문> : C/C++에서와 동일함.
- 단순 if문
- if-else문
- 다중 if-else문
- 중접 if-else문
- switch문 (case문, break문)
