<자바의 캡슐화>
 클래스: 객체 모양을 선언한 틀(템플릿)로, 메소드와 필드는 모두 클래스 내에 구현
 객체: 클래스의 모양대로 생성된 실체(인스턴스)로 객체 내 데이터에 보호, 외부 접근 제한
  - 객체 외부에서는 비공개 멤버에 직접 접근할 수 없음
  - 객체 외부에서는 공개된 메소드를 통해 비공개 멤버에 접근할 수 있음
- 클래스와 객체와의 관계는 붕어빵 틀과 틀에 의해 만들어진 붕어빵(팥, 슈크림 등 여러형태 가능)으로 볼 수 있음
- 객체들은 클래스에 선언된 동일한 속성을 가지지만, 객체마다 서로 다른 고유한 값으로 구분됨
ex) student클래스 내 이름, 학번, 학과 속성을 가짐, 객체마다 김,2022~,컴공 / 박,2021~,화공 등 으로 고유한 값 가짐
 인자 전달 방식: 객체 혹은 배열 전달
- 객체나 배열의 레퍼런스만 전달 (값 복사 아님)
- 메소드의 매개변수와 호출한 실인자 객체나 배열 공유+변경됨

<클래스 구성>
ex)

- 클래스선언: Circle클래스를 선언함
- 필드와 메소드는 반드시 클래스 내에 작성해야 함
- publice접근지정자: 다른 클래스에서 Circle클래스를 사용하거나 접근할 수 있음

<접근지정자(4가지)>
public>protected>default>private
 public: 모든 클래스에 접근 적용
 protected: 동일 패키지 내의 모든 클래스와 자식클래스(다른 패키지에 있어도 가능)에 접근 허용
 default: 동일 패키지에만 접근 허용
- 접근지정자 생략 시 적용됨
 private: 외부로부터 완벽차단
- 동일 클래스 내에만 접근 허용
- 상속받은 서브 클래스에서 접근 불가

<다형성>
 다형성: 같은 이름의 메소드가 클래스나 객체에 따라 다르게 동작하도록 구현
  - 메소드 오버로딩: 이름이 같은 메소드, 매개변수의 개수나 타입이 서로 다름, 리턴타입은 상관없음
   ex) public Circle() {} 과 public Circle(double a, double b) {} 과 public Circle(int a, int b) {}
  - 메소드 오버라이딩: 슈퍼클래스의 메소드를 서브클래스마다 다르게 구현
   ex) A.name 과 B.name

<생성자>
- 클래스의 이름과 반드시 동일한 메소드
- 생성자 여러 개 작성 가능함(오버로딩)
- new를 통해 객체가 생성될 때 자동으로 객체당 한번 호출됨
- 생성자 미작성 시 컴파일러가 자동으로 기본 생성자를 삽입함(생성자가 하나도 선언되지 않은 경우만★ 해당됨)
- 생성자는 리턴타입을 지정할 수 없음, 지정할 필요 없음
- 생성자 내 객체를 초기화하는 데 필요한 코드를 작성함 (생성자의 목적은 객체 초기화)
 기본생성자(=디폴트생성자): 매개 변수 없고, 아무 작업 없이 단순 리턴하는 생성자

<객체 생성>
- 반드시 new키워드를 이용하여 생성해야 함
- 객체에 대한 레퍼런스 변수를 선언하고, 클래스 타입 크기의 메모리를 할당하고, 객체 내 생성자 코드를 실행함
- 객체의 멤버 접근 시 객체레퍼런스.멤버 로 작성함
ex) Circle pizza;  -
pizza = new Circle;  -,
pizza.radius = 10; pizza.name = “불고기피자”;  -

<this 레퍼런스> (중요★)
- 객체 자신에 대한 레퍼런스
- 객체의 멤버 변수와 메소드 변수의 이름이 같은 경우 필요함
- 다른 메소드 호출 시 객체 자신의 레퍼런스를 전달할 때 필요함
- 메소드가 객체 자신의 레퍼런스를 반환할 때 필요함
- this.멤버 형태로 멤버 사용함
ex) public class Circle {
    int radius;
    public Circle() { this.radius = 1; }
    public Circle(int radius) { this.radius = radius;}
    double getArea() { return 3.14*this.radius*this.radius; }
    ...
    }

<this()> 
- 클래스 내의 다른 생성자 호출
- 생성자 내에서만 사용가능함
- 반드시 생성자 코드의 맨처음에 수행해야 함★
ex)  ...
    public Book(String title) {  →생성자 코드
      this(title, “작가미상”);  →맨처음에 수행
      System.out.println(“리스트 끝.”);
    }

<static멤버, non-static멤버>
- static메소드는 non-static멤버에 접근할 수 없음
- non-static메소드는 static멤버에 접근할 수 있음
- static메소드는 this레퍼런스 사용할 수 없음
 static멤버(=클래스멤버)
- 객체마다 생기는 것이 아니라, 클래스당 하나만 생성됨
- 객체 생성 전에도 멤버 사용가능
- 객체가 사라져도 멤버는 사라지지 않음, 멤버는 프로그램이 종료될 때 사라짐
ex) class Sample { static int m; static void f() {...} }
- 접근방법: static멤버를 객체멤버로, 클래스이름으로 접근하는 사례
- 전역변수, 전역함수 만들 때 static으로 클래스에 작성함
ex) math함수사용 시
public class Math { public static int abs(int a); ...
... public static void main(String[] args) { ... int n = Math.abs(-5); ...} }

 non-static멤버(=인스턴트멤버)
- 객체마다 독립적으로 별도 존재함
- 객체 생성 후 멤버 사용가능
- 객체가 사라지면 멤버도 사라짐
ex) 필드와 메소드: 객체 생성 후 비로소 사용 가능함
ex) class Sample { int n; void g() {...} }

<final클래스, final메소드, final필드>
 final클래스: 클래스 상속 불가(변경불가)
ex) final class FC {...}
   class SC extends FC {...} →상속 불가
 final메소드: 오버라이딩 불가(덮어쓰기 불가)
ex) final class FC { protected final int fmethod() {...} }
   class SC extends FC { protected int fmethod() {...} } →오버라이딩 불가
 final필드: 상수선언
- 반드시 선언 시 초기값 지정해야 함
- 실행 중에 값 변경불가함
ex) class SC { public static final double PI = 3.14; }
